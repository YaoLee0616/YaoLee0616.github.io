<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LeetCode-面试题46</title>
    <url>/2020/06/09/LeetCode-%E9%9D%A2%E8%AF%95%E9%A2%9846/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。</p>
<a id="more"></a>

<h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例 1"></a>示例 1</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: 12258</span><br><span class="line">输出: 5</span><br><span class="line">解释: 12258有5种不同的翻译，分别是&quot;bccfi&quot;, &quot;bwfi&quot;, &quot;bczi&quot;, &quot;mcfi&quot;和&quot;mzi&quot;</span><br></pre></td></tr></table></figure>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="JAVA"><a href="#JAVA" class="headerlink" title="JAVA"></a>JAVA</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">translateNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//dp算法</span></span><br><span class="line">        <span class="keyword">int</span> prev1=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> prev2=<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        String s = String.valueOf(num);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;s.length();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">char</span> p = s.charAt(i-<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">char</span> c = s.charAt(i);</span><br><span class="line">            <span class="keyword">int</span> cur = prev1;</span><br><span class="line">            <span class="keyword">if</span>(p==<span class="string">'1'</span>)&#123;</span><br><span class="line">                cur+=prev2;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(p==<span class="string">'2'</span>&amp;&amp;c&gt;=<span class="string">'0'</span>&amp;c&lt;=<span class="string">'5'</span>)&#123;</span><br><span class="line">                cur+=prev2;</span><br><span class="line">            &#125;</span><br><span class="line">            prev2=prev1;</span><br><span class="line">            prev1=cur;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> prev1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>LeetCode</category>
        <category>LeetCode-面试题</category>
      </categories>
      <tags>
        <tag>dp</tag>
      </tags>
  </entry>
  <entry>
    <title>算法总结</title>
    <url>/2020/05/26/%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>算法学习</p>
<a id="more"></a>
<h3 id="dfs-bfs-dinic"><a href="#dfs-bfs-dinic" class="headerlink" title="dfs|bfs|dinic"></a>dfs|bfs|dinic</h3><h4 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h4><h4 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h4><p>NOJ1074(dfs|bfs|dinic): <a href="http://localhost:4000/2020/05/26/NOJ1074/" target="_blank" rel="noopener">http://localhost:4000/2020/05/26/NOJ1074/</a></p>
]]></content>
      <tags>
        <tag>算法总结</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/23/hello-world/</url>
    <content><![CDATA[<h1 id="你好-世界"><a href="#你好-世界" class="headerlink" title="你好 世界"></a>你好 世界</h1><a id="more"></a>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>NOJ1077</title>
    <url>/2020/05/30/NOJ1077/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>南京邮电大学ACM程序设计竞赛校代表队成功晋级ACM/ICPC总决赛，教练老师非常高兴，特地从新西兰采购一批羊毛围巾和手套送出做出突出贡献的同学。但同学们各有所好，希望独自拥有一种型号的围巾或手套。请帮助教练老师分配这批礼物，使最多同学同时拥有自己喜欢的羊毛围巾和手套。</p>
<a id="more"></a>

<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>第一行包括三个整数：N、C、D，分别表示做出突出贡献的同学人数、羊毛围巾的种类数、手套的种类数。 (1 ≤ N ≤ 100, 0 ≤ C ≤ 100，1 ≤ D ≤ 100)。</p>
<p>N行，每行对应一个同学对礼物的选择：</p>
<ul>
<li>该同学所喜欢围巾的种类</li>
<li>该同学所喜欢手套的种类</li>
<li>该同学所喜欢围巾具体类型，依次给出类型号（以0,…,C表示）</li>
<li>该同学所喜欢手套具体类型，依次给出类型号（以0,…,D表示）</li>
</ul>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p> 一行，同时拥有自己所喜欢围巾和手套的最多同学人数。</p>
<p>注意：输出部分的结尾要求包含一个多余的空行。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 3 3</span><br><span class="line">2 2 1 2 3 1</span><br><span class="line">2 2 2 3 1 2</span><br><span class="line">2 2 1 3 1 2</span><br><span class="line">2 1 1 3 3</span><br></pre></td></tr></table></figure>

<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3</span><br></pre></td></tr></table></figure>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">4e4</span> + <span class="number">5</span>, M = <span class="number">1e6</span> + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">int</span> N, C, D, m, n, tot = <span class="number">1</span>, lnk[S], ter[M], nxt[M], val[M], dep[S], cnr[S];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (p) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="keyword">return</span> x;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="keyword">return</span> C + x;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="keyword">return</span> C + N + x;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="keyword">return</span> C + N + N + x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    ter[++tot] = v, nxt[tot] = lnk[u], lnk[u] = tot, val[tot] = w;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addedge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    add(u, v, w), add(v, u, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bfs</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dep, <span class="number">0</span>, <span class="keyword">sizeof</span>(dep));</span><br><span class="line">    <span class="built_in">memcpy</span>(cnr, lnk, <span class="keyword">sizeof</span>(lnk));</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(s), dep[s] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> u = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = lnk[u]; i; i = nxt[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> v = ter[i];</span><br><span class="line">            <span class="keyword">if</span> (!dep[v] &amp;&amp; val[i]) dep[v] = dep[u] + <span class="number">1</span>, q.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dep[t];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> t, <span class="keyword">int</span> flow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (u == t) <span class="keyword">return</span> flow;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = cnr[u]; i&amp;&amp;ans &lt; flow; i = nxt[i]) &#123;</span><br><span class="line">        cnr[u] = i;</span><br><span class="line">        <span class="keyword">int</span> v = ter[i];</span><br><span class="line">        <span class="keyword">if</span> (val[i] &amp;&amp; dep[v] == dep[u] + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = dfs(v, t, <span class="built_in">std</span>::<span class="built_in">min</span>(val[i], flow - ans));</span><br><span class="line">            <span class="keyword">if</span> (x) val[i] -= x, val[i ^ <span class="number">1</span>] += x, ans += x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &lt; flow) dep[u] = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dinic</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (bfs(s, t)) &#123;</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        <span class="keyword">while</span> ((x = dfs(s, t, <span class="number">1</span> &lt;&lt; <span class="number">30</span>)))</span><br><span class="line">        &#123;</span><br><span class="line">            ans += x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; C &gt;&gt; D;</span><br><span class="line">    <span class="keyword">int</span> t = N;</span><br><span class="line">    <span class="keyword">while</span> (t--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line">        <span class="keyword">while</span> (m--) &#123;</span><br><span class="line">            <span class="keyword">int</span>  v;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">            addedge(id(<span class="number">1</span>, v), id(<span class="number">2</span>, t + <span class="number">1</span>), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">            <span class="keyword">int</span> v;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; v;</span><br><span class="line">            addedge(id(<span class="number">3</span>, t + <span class="number">1</span>), id(<span class="number">4</span>, v), <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) addedge(id(<span class="number">2</span>, i), id(<span class="number">3</span>, i), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> S = <span class="number">0</span>, T = C + N + N + D + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= C; ++i) addedge(S, id(<span class="number">1</span>, i), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= D; ++i) addedge(id(<span class="number">4</span>, i), T, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dinic(S, T) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>NOJ</category>
      </categories>
      <tags>
        <tag>dfs</tag>
        <tag>bfs</tag>
        <tag>dinic</tag>
      </tags>
  </entry>
  <entry>
    <title>NOJ1074</title>
    <url>/2020/05/26/NOJ1074/</url>
    <content><![CDATA[<h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>南二有一个巨大的长方形公告牌，尺寸为h×w（h是它的高度，w是它的宽度）。牌子上可以张贴一切可能的告示：最近ACM程序设计竞赛通知，食堂菜单的变化，以及其他重要信息。<br>在9月1日，公告牌是空的。告示一个接一个地张贴在广告牌上。<br>每个告示是单位高度的纸条。具体地说，第i个告示是一个大小1 ×wi的矩形。当有人在公告牌上贴出一个新的告示，他永远选择尽可能上的位置。在所有可能的最高位置，她将永远选择最左边的一个。<br>如果没有有效的位置来贴一个新的告示，则不放在公告牌上。给定公告牌的大小，你的任务是找到告示放置的行数。</p>
<a id="more"></a>

<h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h3><p>输入文件的第一行包括三个整数：h, w, 和 n (1 ≤ h,w ≤ 109; 1 ≤ n ≤ 200 000) ―表示公告牌的大小和告示的数目。<br>下面n行，每行包括一个整数wi (1 ≤wi ≤ 109) 表示 第i个告示的宽度。</p>
<h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h3><p>对于每个告示（按照它们在输入文件中给定的顺序）输出一个值 ― 这个告示放置的行数。行从1到h标识，从顶行开始。如果一个告示不能放置于告示牌，则输出“-1”。</p>
<p>注意：输出部分的结尾要求包含一个多余的空行。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">3 5 5</span><br><span class="line">2</span><br><span class="line">4</span><br><span class="line">3</span><br><span class="line">3</span><br><span class="line">3</span><br></pre></td></tr></table></figure>

<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">-1</span><br></pre></td></tr></table></figure>

<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h5><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MIN(a, b) (a&lt;b?a:b)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX(a, b) (a&gt;b?a:b)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> h, w,n;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> l;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> value;</span><br><span class="line">&#125;tree[<span class="number">800004</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    tree[v].l = l; tree[v].r = r; tree[v].value = w;</span><br><span class="line">    <span class="keyword">if</span> (l == r) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    build(l,mid, v&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    build(mid+<span class="number">1</span>,r,v&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[v].l == tree[v].r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (tree[v].l + tree[v].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= mid)</span><br><span class="line">        update(l, v &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        update(l,v&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">    tree[v].value = MAX(tree[v &lt;&lt; <span class="number">1</span>].value, tree[v &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].value);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> cur)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tree[v].value &lt; cur) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (tree[v].l == tree[v].r)</span><br><span class="line">    &#123;</span><br><span class="line">        tree[v].value -= cur;</span><br><span class="line">        update(tree[v].l, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> tree[v].l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (tree[v &lt;&lt; <span class="number">1</span>].value &gt;= cur) </span><br><span class="line">        judge(v &lt;&lt; <span class="number">1</span>, cur);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        judge(v &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, cur);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; h&gt;&gt;w&gt;&gt;n;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;temp;</span><br><span class="line">    <span class="keyword">int</span> T = n;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> cur;</span><br><span class="line">    build(<span class="number">1</span>, MIN(h, n), <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span> (n--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; cur;</span><br><span class="line">        temp.push_back( judge(<span class="number">1</span>, cur));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; temp.<span class="built_in">size</span>(); i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; temp[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>NOJ</category>
      </categories>
      <tags>
        <tag>线段树</tag>
      </tags>
  </entry>
</search>
