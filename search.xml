<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/05/23/hello-world/</url>
    <content><![CDATA[<h1 id="你好-世界"><a href="#你好-世界" class="headerlink" title="你好 世界"></a>你好 世界</h1><a id="more"></a>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Hello World"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>LeetCode</title>
    <url>/2020/11/13/LeetCode/</url>
    <content><![CDATA[<p><a href="https://leetcode-cn.com/problemset/all/" target="_blank" rel="noopener">LeetCode</a></p>
<a id="more"></a>

<h2 id="1-两数之和-变式"><a href="#1-两数之和-变式" class="headerlink" title="1.两数之和(变式)"></a><a href="https://leetcode-cn.com/problems/two-sum/" target="_blank" rel="noopener">1.两数之和(变式)</a></h2><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个整数数组 nums 和一个目标值 target，请你在该数组中找出和为目标值的第一个解，并返回他们的数组下标。</p>
<h4 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述"></a>输入描述</h4><p>给定 nums = [2, 7, 11, 15], target = 9</p>
<h4 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h4><p>因为 nums[0] + nums[1] = 2 + 7 = 9<br>所以返回 [0, 1]</p>
<h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><p>深度优先搜索得到每一种真子集，对每一种真子集进行判断得到解，利用标志flag得到第一个解。<br>如：[1,2,3] 有7种真子集[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3],深度优先搜索结果如下:<br><img src="/2020/11/13/LeetCode/1.png" alt="深度优先搜索"><br>因每一步递归都需进行判断，所以7种真子集都进行了判断。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><h5 id="C"><a href="#C" class="headerlink" title="C"></a>C</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1E5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> numsSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> target, returnSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>  res[N], nums[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> sum)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (x &gt;= numsSize || sum &gt; target||flag)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (sum == target)</span><br><span class="line">	&#123;</span><br><span class="line">		flag = <span class="number">1</span>;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"returnSize = %d\n"</span>, returnSize);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"returnNums = [ %d "</span>,res[<span class="number">0</span>]);</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; returnSize; j++) <span class="built_in">printf</span>(<span class="string">", %d "</span>, res[j]);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"]"</span>);</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt; numsSize; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		res[returnSize++] = i;</span><br><span class="line">		dfs(i + <span class="number">1</span>, sum + nums[i]);</span><br><span class="line">		returnSize--;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"nums: \n"</span>);</span><br><span class="line">	<span class="keyword">while</span> (ch != <span class="string">'\n'</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;nums[numsSize++]);</span><br><span class="line">		ch = getchar();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"target: \n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;target);</span><br><span class="line">	dfs(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">if</span> (flag == <span class="number">0</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"无答案"</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2.两数相加"></a><a href="https://leetcode-cn.com/problems/add-two-numbers/" target="_blank" rel="noopener">2.两数相加</a></h2><h3 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h3><p>给出两个 非空 的链表用来表示两个非负的整数。其中，它们各自的位数是按照 逆序 的方式存储的，并且它们的每个节点只能存储 一位 数字。</p>
<p>如果，我们将这两个数相加起来，则会返回一个新的链表来表示它们的和。</p>
<p>您可以假设除了数字 0 之外，这两个数都不会以 0 开头。</p>
<h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)</span><br><span class="line">输出：7 -&gt; 0 -&gt; 8</span><br><span class="line">原因：342 + 465 &#x3D; 807</span><br></pre></td></tr></table></figure>

<h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><h4 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h4><p>利用两整数相加的规则进行运算</p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><h5 id="C-1"><a href="#C-1" class="headerlink" title="C"></a>C</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">struct ListNode* <span class="title">addTwoNumbers</span><span class="params">(struct ListNode* l1, struct ListNode* l2)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> carry = <span class="number">0</span>; <span class="comment">// 进位</span></span><br><span class="line">	<span class="keyword">int</span> cur1, cur2;</span><br><span class="line">	<span class="keyword">int</span> sum;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>*<span class="title">head</span> = <span class="title">NULL</span>, *<span class="title">tail</span> = <span class="title">NULL</span>;</span></span><br><span class="line">	<span class="keyword">while</span> (l1 != <span class="literal">NULL</span> || l2 != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		cur1 = l1 != <span class="literal">NULL</span> ? l1-&gt;val : <span class="number">0</span>;</span><br><span class="line">		cur2 = l2 != <span class="literal">NULL</span> ? l2-&gt;val : <span class="number">0</span>;</span><br><span class="line">		sum = cur1 + cur2 + carry;</span><br><span class="line">		<span class="keyword">if</span> (head == <span class="literal">NULL</span>)</span><br><span class="line">		&#123;</span><br><span class="line">			head = tail = (struct ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">			tail-&gt;val = sum % <span class="number">10</span>;</span><br><span class="line">			tail-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			struct ListNode*p = (struct ListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">			p-&gt;val = sum % <span class="number">10</span>;</span><br><span class="line">			p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">			tail-&gt;next = p;</span><br><span class="line">			tail = p;</span><br><span class="line">		&#125;</span><br><span class="line">		carry = sum / <span class="number">10</span>;</span><br><span class="line">		<span class="keyword">if</span> (l1 != <span class="literal">NULL</span>)l1 = l1-&gt;next;</span><br><span class="line">		<span class="keyword">if</span> (l2 != <span class="literal">NULL</span>)l2 = l2-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (carry &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span>*<span class="title">p</span> = (<span class="title">struct</span> <span class="title">ListNode</span>*)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">ListNode</span>));</span></span><br><span class="line">		p-&gt;val = carry;</span><br><span class="line">		p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">		tail-&gt;next = p;</span><br><span class="line">		tail = p;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a><a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/" target="_blank" rel="noopener">3.无重复字符的最长子串</a></h2><h3 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p>
<h4 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure>

<h4 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure>

<h4 id="示例3"><a href="#示例3" class="headerlink" title="示例3"></a>示例3</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure>

<h3 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h3><h4 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h4><p>输入字符串s，从小到大依次以每一位元素为头，找到最长不含重复字符的子串，得到结果子串的长度以后，与当前得到的最大长度进行比较，取较大的那一个，最后返回结果。<br>如：s=“abcb”，a开头“abc”长度为3，b开头“bc”长度为2，c开头“cb”长度为2，b开头“b”长度为1，最后返回长度3。</p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><h5 id="C-2"><a href="#C-2" class="headerlink" title="C"></a>C</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1E5</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">judge</span><span class="params">(<span class="keyword">char</span>*cop, <span class="keyword">char</span> c)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(cop); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (cop[i] == c)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(<span class="keyword">char</span> * s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> copy[N];</span><br><span class="line">	<span class="built_in">memset</span>(copy, <span class="string">'\0'</span>, <span class="keyword">sizeof</span>(<span class="keyword">char</span>)*N);</span><br><span class="line">	<span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">memset</span>(copy, <span class="string">'\0'</span>, N);</span><br><span class="line">		copy[<span class="number">0</span>] = s[i];</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>, count = <span class="number">1</span>; j &lt; <span class="built_in">strlen</span>(s) - i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (!judge(copy, s[i + j]))</span><br><span class="line">			&#123;</span><br><span class="line">				copy[count++] = s[i + j];</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">			&#123;</span><br><span class="line">				num = count &gt; num ? count : num;</span><br><span class="line">				<span class="keyword">break</span>;</span><br><span class="line">			&#125;</span><br><span class="line">			num = count &gt; num ? count : num;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[N];</span><br><span class="line">	<span class="keyword">int</span> length;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">	length = lengthOfLongestSubstring(s);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"length = %d"</span>, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="4-寻找两个正序数组的中位数"><a href="#4-寻找两个正序数组的中位数" class="headerlink" title="4.寻找两个正序数组的中位数"></a><a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/" target="_blank" rel="noopener">4.寻找两个正序数组的中位数</a></h2><h3 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定两个大小为 m 和 n 的正序（从小到大）数组 nums1 和 nums2。请你找出并返回这两个正序数组的中位数。</p>
<h4 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 &#x3D; [1,3], nums2 &#x3D; [2]</span><br><span class="line">输出：2.00000</span><br><span class="line">解释：合并数组 &#x3D; [1,2,3] ，中位数 2</span><br></pre></td></tr></table></figure>

<h4 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 &#x3D; [1,2], nums2 &#x3D; [3,4]</span><br><span class="line">输出：2.50000</span><br><span class="line">解释：合并数组 &#x3D; [1,2,3,4] ，中位数 (2 + 3) &#x2F; 2 &#x3D; 2.5</span><br></pre></td></tr></table></figure>

<h4 id="示例3-1"><a href="#示例3-1" class="headerlink" title="示例3"></a>示例3</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 &#x3D; [0,0], nums2 &#x3D; [0,0]</span><br><span class="line">输出：0.00000</span><br></pre></td></tr></table></figure>

<h4 id="示例4"><a href="#示例4" class="headerlink" title="示例4"></a>示例4</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 &#x3D; [], nums2 &#x3D; [1]</span><br><span class="line">输出：1.00000</span><br></pre></td></tr></table></figure>

<h4 id="示例5"><a href="#示例5" class="headerlink" title="示例5"></a>示例5</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入：nums1 &#x3D; [2], nums2 &#x3D; []</span><br><span class="line">输出：2.00000</span><br></pre></td></tr></table></figure>

<h3 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h3><h4 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h4><p>对于长度为nums1Size的nums1数组和长度为nums2Size的nums2数组，若nums1Size+nums2Size为奇数，则合并数组之后下标为[(nums1Size+nums2Size)/2]的数即为中位数；若为偶数，则合并数组之后下标为[(nums1Size+nums2Size)/2-1]的数和下标为[(nums1Size+nums2Size)/2]的数的平均数即为中位数。</p>
<p>而下标为i的值对应的是两个数组中第i+1小的值，所以对两个数组进行遍历，找到第[(nums1Size+nums2Size)/2]+1小的数即可，并记录前面一个值。</p>
<h4 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h4><h5 id="C-3"><a href="#C-3" class="headerlink" title="C"></a>C</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">findMedianSortedArrays</span><span class="params">(<span class="keyword">int</span>* nums1, <span class="keyword">int</span> nums1Size, <span class="keyword">int</span>* nums2, <span class="keyword">int</span> nums2Size)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> Size = nums1Size + nums2Size;</span><br><span class="line">	<span class="keyword">double</span> prev = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">double</span> curv = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">int</span> k1 = <span class="number">0</span>, k2 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Size/<span class="number">2</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// nums2遍历完或nums1，nums2都没遍历完时，nums1[k1]&lt;nums2[k2]，此时，要在nums1里面找。</span></span><br><span class="line">		<span class="keyword">if</span> (k2&gt;=nums2Size||(k1&lt;nums1Size&amp;&amp;nums1[k1]&lt;nums2[k2])) &#123;</span><br><span class="line">				prev = curv;</span><br><span class="line">				curv = nums1[k1];</span><br><span class="line">				k1++;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">else</span> &#123;</span><br><span class="line">				prev = curv;</span><br><span class="line">				curv = nums2[k2];</span><br><span class="line">				k2++;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">if</span> (Size % <span class="number">2</span>) &#123;</span><br><span class="line">		<span class="keyword">return</span> curv;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (prev + curv) / <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5.最长回文子串"></a><a href="https://leetcode-cn.com/problems/longest-palindromic-substring/" target="_blank" rel="noopener">5.最长回文子串</a></h2><h3 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h3><p>给定一个字符串 s，找到 s 中最长的回文子串。你可以假设 s 的最大长度为 1000。</p>
<h4 id="示例1-2"><a href="#示例1-2" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;babad&quot;</span><br><span class="line">输出: &quot;bab&quot;</span><br><span class="line">注意: &quot;aba&quot; 也是一个有效答案。</span><br></pre></td></tr></table></figure>

<h4 id="示例2-2"><a href="#示例2-2" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: &quot;cbbd&quot;</span><br><span class="line">输出: &quot;bb&quot;</span><br></pre></td></tr></table></figure>

<h3 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h3><h4 id="解法-4"><a href="#解法-4" class="headerlink" title="解法"></a>解法</h4><p>动态规划：记一个二维数组dp，dp[j][i]的值若为1，则从下标为j到下标为i的字符串是一个回文串；若为0，则不是。首先初始化dp为0，然后对于i==j的初始化为1，因为只有一个元素的字符串必是回文串。当i==j+1时，即字符串有两个字符时，只有s[i]==s[j]时，才为回文串。当字符串有大于两个的字符时，满足dp[j + 1][i - 1] &amp;&amp; s[i] == s[j]条件时，才为回文串，即两侧字符相同，且去掉两侧字符后的字符串也为回文串。</p>
<p>对于一个字符串，以下标为1的元素开始，从小到大依次以每一位元素为尾，然后从头开始遍历，到该元素结束，将是回文串的两个下标记录下来，并在dp里赋值为1，以用来后续回文串的判断，对于当前最长的回文串的下标用head和tail记录下来，最后得到结果。</p>
<h4 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h4><h5 id="C-4"><a href="#C-4" class="headerlink" title="C"></a>C</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1E5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> dp[N][N];</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">longestPalindrome</span><span class="params">(<span class="keyword">char</span> * s)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> res[N];</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(s); i++) dp[i][i] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">int</span> head = <span class="number">0</span>, tail = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="built_in">strlen</span>(s); i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> ((i == j + <span class="number">1</span> &amp;&amp; s[i] == s[j]) || (dp[j + <span class="number">1</span>][i - <span class="number">1</span>] &amp;&amp; s[i] == s[j]))</span><br><span class="line">			&#123;</span><br><span class="line">				<span class="keyword">if</span> (i - j &gt; tail - head)</span><br><span class="line">				&#123;</span><br><span class="line">					head = j;</span><br><span class="line">					tail = i;</span><br><span class="line">				&#125;</span><br><span class="line">				dp[j][i] = <span class="number">1</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="built_in">memcpy</span>(res, s + head, <span class="keyword">sizeof</span>(<span class="keyword">char</span>)*(tail - head + <span class="number">1</span>));</span><br><span class="line">	res[tail - head + <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[N];</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"res = %s"</span>, longestPalindrome(s));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="6-Z字形变换"><a href="#6-Z字形变换" class="headerlink" title="6.Z字形变换"></a><a href="https://leetcode-cn.com/problems/zigzag-conversion/" target="_blank" rel="noopener">6.Z字形变换</a></h2><h3 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h3><p>将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。</p>
<p>比如输入字符串为 “LEETCODEISHIRING” 行数为 3 时，排列如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">L   C   I   R</span><br><span class="line">E T O E S I I G</span><br><span class="line">E   D   H   N</span><br></pre></td></tr></table></figure>

<p>之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</p>
<p>请你实现这个将字符串进行指定行数变换的函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">string convert(string s, int numRows);</span><br></pre></td></tr></table></figure>
<h4 id="示例1-3"><a href="#示例1-3" class="headerlink" title="示例1"></a>示例1</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 3</span><br><span class="line">输出: &quot;LCIRETOESIIGEDHN&quot;</span><br></pre></td></tr></table></figure>

<h4 id="示例2-3"><a href="#示例2-3" class="headerlink" title="示例2"></a>示例2</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">输入: s &#x3D; &quot;LEETCODEISHIRING&quot;, numRows &#x3D; 4</span><br><span class="line">输出: &quot;LDREOEIIECIHNTSG&quot;</span><br><span class="line">解释:</span><br><span class="line"></span><br><span class="line">L     D     R</span><br><span class="line">E   O E   I I</span><br><span class="line">E C   I H   N</span><br><span class="line">T     S     G</span><br></pre></td></tr></table></figure>

<h3 id="题解-5"><a href="#题解-5" class="headerlink" title="题解"></a>题解</h3><h4 id="解法-5"><a href="#解法-5" class="headerlink" title="解法"></a>解法</h4><p>先以固定规则填入二维数组，然后遍历一遍二维数组得到结果。</p>
<h4 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h4><h5 id="C-5"><a href="#C-5" class="headerlink" title="C"></a>C</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 1E5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> copy[N][N];</span><br><span class="line"><span class="function"><span class="keyword">char</span> * <span class="title">convert</span><span class="params">(<span class="keyword">char</span> * s, <span class="keyword">int</span> numRows)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">char</span> res[N];</span><br><span class="line">	<span class="built_in">memset</span>(res, <span class="string">'\0'</span>, N);</span><br><span class="line">	<span class="keyword">int</span> col = <span class="number">0</span>; <span class="comment">// 遍历的列数</span></span><br><span class="line">	<span class="keyword">int</span> n = <span class="number">0</span>; <span class="comment">// 遍历的位数</span></span><br><span class="line">	<span class="keyword">while</span> (n &lt; <span class="built_in">strlen</span>(s))</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (n &gt;= <span class="built_in">strlen</span>(s)) <span class="keyword">break</span>;</span><br><span class="line">			copy[i][col] = s[n++];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">2</span>; k &lt; numRows ; k++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (n &gt;= <span class="built_in">strlen</span>(s)) <span class="keyword">break</span>;</span><br><span class="line">			copy[numRows - k][++col] = s[n++];</span><br><span class="line">		&#125;</span><br><span class="line">		col++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">int</span> m = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numRows; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; col; j++)</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">if</span> (copy[i][j] != <span class="number">0</span>)</span><br><span class="line">			&#123;</span><br><span class="line">				res[m++] = copy[i][j];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	res[m] = <span class="string">'\0'</span>;</span><br><span class="line">	<span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">char</span> s[N];</span><br><span class="line">	<span class="keyword">int</span> numsRows;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%s%d"</span>, s,&amp;numsRows);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"res = %s"</span>, convert(s,numsRows));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>带表头单链表的逆置与排序</title>
    <url>/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/</url>
    <content><![CDATA[<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><a id="more"></a>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Status;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	<span class="keyword">int</span> element;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;Node;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">headerList</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">	Node *head;</span><br><span class="line">	<span class="keyword">int</span> n;</span><br><span class="line">&#125;HeaderList;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Init</span><span class="params">(HeaderList *h)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	h-&gt;head = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	<span class="keyword">if</span> (!h-&gt;head)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	h-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">	h-&gt;n = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Insert</span><span class="params">(HeaderList *h, <span class="keyword">int</span> i, ElemType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node *p, *q;</span><br><span class="line">	<span class="keyword">int</span> j;</span><br><span class="line">	<span class="keyword">if</span> (i &lt; <span class="number">-1</span>)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	p = h-&gt;head;</span><br><span class="line">	<span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++)</span><br><span class="line">		p = p-&gt;link;</span><br><span class="line">	q = (Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Node));</span><br><span class="line">	q-&gt;element = x;</span><br><span class="line">	q-&gt;link = p-&gt;link;</span><br><span class="line">	p-&gt;link = q;</span><br><span class="line">	h-&gt;n++;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Invert</span><span class="params">(HeaderList *h)</span> <span class="comment">// 逆置</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node *p = h-&gt;head-&gt;link,*q;</span><br><span class="line">	h-&gt;head-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		q = p-&gt;link; <span class="comment">// 记住下一节点</span></span><br><span class="line">		p-&gt;link = h-&gt;head-&gt;link;</span><br><span class="line">		h-&gt;head-&gt;link = p;</span><br><span class="line">		p = q;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Sort</span><span class="params">(HeaderList *h)</span> <span class="comment">// 排序</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node *p, *pre, *q;</span><br><span class="line">	p = h-&gt;head-&gt;link-&gt;link;</span><br><span class="line">	h-&gt;head-&gt;link-&gt;link = <span class="literal">NULL</span>;</span><br><span class="line">	<span class="keyword">while</span> (p != <span class="literal">NULL</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		q = p-&gt;link; <span class="comment">// 记住下一节点</span></span><br><span class="line">		pre = h-&gt;head;</span><br><span class="line">		<span class="keyword">while</span> (pre-&gt;link != <span class="literal">NULL</span> &amp;&amp; pre-&gt;link-&gt;element &lt; p-&gt;element)</span><br><span class="line">		&#123;</span><br><span class="line">			pre = pre-&gt;link;</span><br><span class="line">		&#125;</span><br><span class="line">		p-&gt;link = pre-&gt;link;</span><br><span class="line">		pre-&gt;link = p;</span><br><span class="line">		p = q;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Status <span class="title">Output</span><span class="params">(HeaderList *h)</span> <span class="comment">// 带表头结点的单链表的输出</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	Node *p;</span><br><span class="line">	<span class="keyword">if</span> (!h-&gt;n) <span class="comment">// 判断顺序表是否为空</span></span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	p = h-&gt;head-&gt;link;</span><br><span class="line">	<span class="keyword">while</span> (p)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">"%d "</span>, p-&gt;element);</span><br><span class="line">		p = p-&gt;link;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> n, num;</span><br><span class="line">	HeaderList h;</span><br><span class="line">	Init(&amp;h);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"请输入单链表需要插入元素的个数及各个元素的值:\n"</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line">		Insert(&amp;h, i - <span class="number">1</span>, num);</span><br><span class="line">	&#125;</span><br><span class="line">	Invert(&amp;h);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"逆置后:"</span>);</span><br><span class="line">	Output(&amp;h);</span><br><span class="line">	Sort(&amp;h);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"\n排序后:"</span>);</span><br><span class="line">	Output(&amp;h);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="详解"><a href="#详解" class="headerlink" title="详解"></a>详解</h2><h3 id="具体流程分析（逆置）"><a href="#具体流程分析（逆置）" class="headerlink" title="具体流程分析（逆置）"></a><center>具体流程分析（逆置）</center></h3><p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E5%8E%9F%E9%93%BE%E8%A1%A8.png" alt="原链表"></p>
<center>原链表</center>
<br>

<p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E9%80%86%E7%BD%AE%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="逆置初始化"></p>
<center>逆置初始化</center>
<br>

<p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E9%80%86%E7%BD%AE%E7%AC%AC%E4%B8%80%E6%AC%A1while%E5%86%85%E6%93%8D%E4%BD%9C--1.png" alt="逆置第一次while内操作--1"></p>
<center>逆置第一次while内操作--1</center>
<center>q = p->link;</center>
<br>

<p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E9%80%86%E7%BD%AE%E7%AC%AC%E4%B8%80%E6%AC%A1while%E5%86%85%E6%93%8D%E4%BD%9C--2.png" alt="逆置第一次while内操作--2"></p>
<center>逆置第一次while内操作--2</center>
<center>p->link = h->head->link;</center>
<br>

<p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E9%80%86%E7%BD%AE%E7%AC%AC%E4%B8%80%E6%AC%A1while%E5%86%85%E6%93%8D%E4%BD%9C--3.png" alt="逆置第一次while内操作--3"></p>
<center>逆置第一次while内操作--3</center>
<center>h->head->link = p;</center>
<br>

<p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E9%80%86%E7%BD%AE%E7%AC%AC%E4%B8%80%E6%AC%A1while%E5%86%85%E6%93%8D%E4%BD%9C--4.png" alt="逆置第一次while内操作--4"></p>
<center>逆置第一次while内操作--4</center>
<center>p = q;</center>
<br>

<h3 id="具体流程分析（排序）"><a href="#具体流程分析（排序）" class="headerlink" title="具体流程分析（排序）"></a><center>具体流程分析（排序）</center></h3><p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E5%8E%9F%E9%93%BE%E8%A1%A8.png" alt="原链表"></p>
<center>原链表</center>
<br>

<p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E6%8E%92%E5%BA%8F%E5%88%9D%E5%A7%8B%E5%8C%96.png" alt="排序初始化"></p>
<center>排序初始化</center>
<br>

<p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E7%AC%AC%E4%B8%80%E6%AC%A1%E9%81%8D%E5%8E%86%E5%90%8E.png" alt="第一次遍历后"></p>
<center>第一次遍历后</center>
<br>

<p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E7%AC%AC%E4%BA%8C%E6%AC%A1%E9%81%8D%E5%8E%86%E5%90%8E.png" alt="第二次遍历后"></p>
<center>第二次遍历后</center>
<br>

<p><img src="/2020/09/25/%E5%B8%A6%E8%A1%A8%E5%A4%B4%E5%8D%95%E9%93%BE%E8%A1%A8%E7%9A%84%E9%80%86%E7%BD%AE%E4%B8%8E%E6%8E%92%E5%BA%8F/%E7%AC%AC%E4%B8%89%E6%AC%A1%E9%81%8D%E5%8E%86%E5%90%8E.png" alt="第三次遍历后"></p>
<center>第三次遍历后</center>
<br>
]]></content>
      <tags>
        <tag>单链表</tag>
      </tags>
  </entry>
</search>
